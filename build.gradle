buildscript {
    ext {
        kotlin_version = '1.9.0'
        coroutines_version = '1.6.2'
        mockk_version = '1.12.2'
        ktlint_version = '0.43.2'
        jsoup_version = '1.15.3'
        coroutines_version = '1.9.0-RC'
        kotlinlogging_version = '2.1.21'
        serialization_plugin_version = ' 1.6.0'
        serialization_version = ' 1.6.0'
    }
    repositories {
        mavenCentral()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$serialization_plugin_version"
    }
}

version = "1.0"


repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

mainClassName = 'com.lisawehb.webcrawler.MainKt'

dependencies {
    //html parsing
    implementation("org.jsoup:jsoup:$jsoup_version")

    //tests
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation "io.mockk:mockk:$mockk_version"

    //logging
    implementation "io.github.microutils:kotlin-logging:$kotlinlogging_version"
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.12'

    //concurrency
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")

    //serialization
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    test.java.srcDirs += 'src/test/kotlin/'
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
}

//create a single Jar with all dependencies
tasks.register('fullJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier = 'full'

    manifest {
        attributes 'Main-Class': mainClassName
    }

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}